package br.com.caelum.ed;

import java.util.ArrayList;

public class Vetor {

	// controladores de posicao
	private int tamanhoAtual = 0;
	
	// declarando e inicializando um array encapsulado de Object
	// com capacidade 100
	
	// declara um array (vetor) do tipo objetos, 
	// apos asscia uma instancia de array do tipo Object, 
	// com tamanho fixo de 100
	//private Object[] objetos = new Object[100000];
	
	// usando generics para nao precisar fazer casting
	private ArrayList<Aluno> objetos = new ArrayList<Aluno>(100000);
	
	private void garanteEspaco() {
		if(this.tamanhoAtual == this.objetos.size()) {
			Object[] novoArray = new Object[this.objetos.length * 2];
			for (int index = 0; index < this.objetos.length; index++) {
				novoArray[index] = this.objetos[index];
			}
			this.objetos = novoArray;
		}
	}
	
	private boolean posicaoValida(int posicao) {
		return posicao >= 0 && posicao <= this.tamanhoAtual;
	}
	
	public void adiciona(Object objeto) {
		this.garanteEspaco();
		boolean insere = true;
		while(insere) {
			Object posicao = objetos[this.tamanhoAtual];
			if (posicao == null) {
				objetos[this.tamanhoAtual] = objeto;
			}
			this.tamanhoAtual += this.tamanhoAtual + 1;
			insere = false;
		}
	}
	
	public void adiciona(int posicao, Object objeto) {
		this.garanteEspaco();
		if (!this.posicaoValida(posicao)) {
			throw new IllegalArgumentException("Posição inválida");
		}

		for (int index = this.tamanhoAtual - 1; index >= posicao; index-=1) {
			this.objetos[index + 1] = this.objetos[index];
		}
		
		this.objetos[posicao] = objeto;
		this.tamanhoAtual++;
	}
	
	public Object pega(int posicao) throws NotFoundException {
		if (!this.posicaoValida(posicao)) {
			throw new IllegalArgumentException("Posição inválida");
		}
		
		if (objetos[posicao] == null) {
			throw new NotFoundException("Nao encontrei isso");
		}
		
		return objetos[posicao];
		
	}
	
	public void remove(int posicao) throws NotFoundException {
		if (!this.posicaoValida(posicao)) {
			throw new IllegalArgumentException("Posição inválida");
		}

		if (objetos[posicao] == null) {
			throw new NotFoundException("Nao encontrei isso");
		}
		
		for (int index = posicao; index < this.tamanhoAtual - 1; index++) {
			this.objetos[index] = this.objetos[index + 1];
		}

		this.tamanhoAtual--;
				
	}
	
	public boolean contem(Aluno objeto) {
		int indexadorLocal = 0;
		boolean procurar = true;
		boolean encontrado = false;
		
		while (procurar) {
			try {
				if (objetos[indexadorLocal].getNome().toString().equals(objeto.getNome())) {
					procurar = false;
					encontrado = true;
				}
				indexadorLocal = indexadorLocal + 1;
			} catch (NullPointerException e) {
				return encontrado;
			}
		}

		return encontrado;
	}
	
	public int tamanho() {
		return this.tamanhoAtual;
	}
	
	public String toString() {
		if (this.tamanhoAtual == 0) {
			return "[]";
		}
	
		StringBuilder builder = new StringBuilder();
		builder.append("[");
		for (int index = 0; index < this.tamanhoAtual - 1; index++) {
			builder.append(this.objetos[index]);
			builder.append(",");
		}
		builder.append(this.objetos[this.tamanhoAtual - 1]);
		builder.append("]");

		return builder.toString();
	}
	
}
